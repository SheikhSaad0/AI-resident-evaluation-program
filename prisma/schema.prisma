// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Job {
  id                String    @id @default(cuid())
  status            String
  gcsUrl            String
  gcsObjectPath     String?
  surgeryName       String
  additionalContext String?
  result            Json?
  error             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  withVideo         Boolean   @default(false)
  videoAnalysis     Boolean   @default(false)
  audioDuration     Int?      // Add this line to store the recording's length in seconds
  residentId        String?
  resident          Resident? @relation(fields: [residentId], references: [id], onDelete: SetNull)

  attendingId       String?
  attending         Attending? @relation(fields: [attendingId], references: [id], onDelete: SetNull)
  
  programDirectorId String?
  programDirector   ProgramDirector? @relation(fields: [programDirectorId], references: [id], onDelete: SetNull)
}

model Resident {
  id            String       @id @default(cuid())
  name          String
  email         String?
  photoUrl      String?
  company       String?
  year          String?
  medicalSchool String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  jobs          Job[]
  evaluations   Evaluation[]
}

model Attending {
  id                 String  @id @default(cuid())
  name               String
  email              String?
  title              String
  primaryInstitution String
  specialty          String
  residency          String?
  medicalSchool      String?
  fellowship         String?
  photoUrl           String?
  jobs               Job[]
}

model ProgramDirector {
  id                 String @id @default(cuid())
  name               String
  email              String?
  title              String
  primaryInstitution String
  specialty          String
  photoUrl           String?
  jobs               Job[]
}

model Settings {
  id               String @id @default(cuid())
  activeDatabase   String @default("testing")
  defaultDatabase  String @default("testing")
  testingDbName    String @default("Testing Database")
  productionDbName String @default("Production Database")
}

model Evaluation {
  id              String           @id @default(cuid())
  procedure       String
  overallFeedback String           @db.Text
  transcript      String           @db.Text
  resident        Resident         @relation(fields: [residentId], references: [id])
  residentId      String
  steps           EvaluationStep[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model EvaluationStep {
  id           String     @id @default(cuid())
  name         String
  score        Int
  duration     String
  feedback     String     @db.Text
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  evaluationId String
}